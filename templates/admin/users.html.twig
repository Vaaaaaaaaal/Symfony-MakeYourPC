{% extends 'base.html.twig' %}

{% block title %}Gestion des utilisateurs - MakeYourPC{% endblock %}

{% block body %}
<div class="container">
    <h1 class="my-4">Gestion des utilisateurs</h1>

    <div class="manage-users">
        <table class="user-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nom</th>
                    <th>Prénom</th>
                    <th>Email</th>
                    <th>Rôle</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for user in users %}
                    <tr>
                        <td>{{ user.id }}</td>
                        <td>{{ user.name }}</td>
                        <td>{{ user.surname }}</td>
                        <td>{{ user.email }}</td>
                        <td>
                            {% if user.id == app.user.id %}
                                <select class="role-select" disabled>
                                    <option value="ROLE_USER" {% if not user.isAdmin %}selected{% endif %}>Utilisateur</option>
                                    <option value="ROLE_ADMIN" {% if user.isAdmin %}selected{% endif %}>Administrateur</option>
                                </select>
                            {% else %}
                                <select class="role-select" data-user-id="{{ user.id }}">
                                    <option value="ROLE_USER" {% if not user.isAdmin %}selected{% endif %}>Utilisateur</option>
                                    <option value="ROLE_ADMIN" {% if user.isAdmin %}selected{% endif %}>Administrateur</option>
                                </select>
                            {% endif %}
                        </td>
                        <td class="actions-container">
                            <button class="btn-action edit" title="Modifier">
                                <i class="fas fa-edit"></i>
                            </button>
                            {% if not user.isAdmin and user.id != app.user.id %}
                                <button class="btn-action delete" title="Supprimer">
                                    <i class="fas fa-trash"></i>
                                </button>
                            {% endif %}
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

<div class="modal" id="editUserModal" style="display: none;">
    <div class="modal-content">
        <h2>Modifier l'utilisateur</h2>
        <div id="editUserFormContainer">
            {# Le formulaire sera chargé ici dynamiquement #}
        </div>
    </div>
</div>

<div class="modal" id="deleteConfirmModal">
    <div class="modal-content">
        <h2>Confirmation de suppression</h2>
        <p></p>
        <div class="modal-actions">
            <button id="confirmDelete" class="btn-danger">Supprimer</button>
            <button type="button" class="btn-cancel" onclick="closeModal('deleteConfirmModal')">Annuler</button>
        </div>
    </div>
</div>

<div class="notification-container" id="notificationContainer"></div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span>${message}</span>
        </div>
    `;
    
    document.getElementById('notificationContainer').appendChild(notification);
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

document.addEventListener('DOMContentLoaded', function() {
    // Gestion du changement de rôle
    const roleSelects = document.querySelectorAll('.role-select');
    
    roleSelects.forEach(select => {
        select.addEventListener('change', async function() {
            try {
                const userId = this.dataset.userId;
                const newRole = this.value;
                const oldValue = this.value === 'ROLE_ADMIN' ? 'ROLE_USER' : 'ROLE_ADMIN';
                
                const response = await fetch(`/admin/users/${userId}/role`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ role: newRole })
                });

                const data = await response.json();
                
                if (data.success) {
                    showNotification('Rôle modifié avec succès');
                } else {
                    this.value = oldValue;
                    showNotification(data.message || 'Erreur lors du changement de rôle', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                this.value = oldValue;
                showNotification('Une erreur est survenue', 'error');
            }
        });
    });

    // Gestion de la suppression
    const deleteButtons = document.querySelectorAll('.btn-action.delete');
    let userToDelete = null;

    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const row = this.closest('tr');
            userToDelete = row.querySelector('.role-select').dataset.userId;
            const modal = document.getElementById('deleteConfirmModal');
            const confirmMessage = modal.querySelector('.modal-content p');
            confirmMessage.innerHTML = `
                Êtes-vous sûr de vouloir supprimer cet utilisateur ?<br><br>
                <strong>Attention :</strong> Cette action supprimera également :<br>
                - Toutes ses commandes<br>
                - Tous ses avis/évaluations<br>
                - Son panier actuel (si existant)<br><br>
                Cette action est irréversible.
            `;
            modal.style.display = 'flex';
        });
    });

    document.getElementById('confirmDelete').addEventListener('click', async function() {
        if (!userToDelete) return;

        try {
            const response = await fetch(`/admin/users/${userToDelete}/delete`, {
                method: 'DELETE',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            const data = await response.json();

            if (data.success) {
                const row = document.querySelector(`[data-user-id="${userToDelete}"]`).closest('tr');
                row.remove();
                closeModal('deleteConfirmModal');
                showNotification('Utilisateur supprimé avec succès');
            } else {
                showNotification(data.message || 'Erreur lors de la suppression', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('Une erreur est survenue', 'error');
        }
    });

    // Ajoutez ce code après la gestion de la suppression
    const editButtons = document.querySelectorAll('.btn-action.edit');

    editButtons.forEach(button => {
        button.addEventListener('click', async function() {
            const row = this.closest('tr');
            const userId = row.querySelector('.role-select').dataset.userId;
            const modal = document.getElementById('editUserModal');
            const formContainer = document.getElementById('editUserFormContainer');
            
            try {
                const response = await fetch(`/admin/users/${userId}/edit`);
                const html = await response.text();
                formContainer.innerHTML = html;
                modal.style.display = 'flex';
                
                // Gestion du formulaire d'édition
                const form = formContainer.querySelector('form');
                form.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(form);
                    
                    try {
                        const response = await fetch(`/admin/users/${userId}/edit`, {
                            method: 'POST',
                            body: formData
                        });
                        
                        const data = await response.json();
                        if (data.success) {
                            // Mise à jour correcte des données dans le tableau
                            const name = formData.get('user_edit[name]');
                            const surname = formData.get('user_edit[surname]');
                            const email = formData.get('user_edit[email]');
                            
                            row.querySelector('td:nth-child(2)').textContent = name;
                            row.querySelector('td:nth-child(3)').textContent = surname;
                            row.querySelector('td:nth-child(4)').textContent = email;
                            
                            closeModal('editUserModal');
                            showNotification('Utilisateur modifié avec succès');
                        } else {
                            showNotification(data.message || 'Erreur lors de la modification', 'error');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showNotification('Une erreur est survenue', 'error');
                    }
                });
            } catch (error) {
                console.error('Error:', error);
                showNotification('Erreur lors du chargement du formulaire', 'error');
            }
        });
    });
});

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}
</script>
{% endblock %} 
