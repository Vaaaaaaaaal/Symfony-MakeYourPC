{% extends 'base.html.twig' %}

{% block title %}{{ product.name }} - MakeYourPC{% endblock %}

{% block body %}
    <div class="container product-detail">
        <div class="product-main">
            <div class="product-image-container">
                <img src="{{ asset('images/products/' ~ product.imagePath) }}" alt="{{ product.name }}" class="product-image">
            </div>
            
            <div class="product-info">
                <div class="product-header">
                    <h1>{{ product.name }}</h1>
                </div>

                <div class="product-rating" data-product-id="{{ product.id }}">
                    {% if app.user %}
                        <div class="rating-stars interactive">
                            {% for i in 1..5 %}
                                <i data-lucide="star" 
                                   class="star {% if product.rating is not null and i <= product.rating %}filled{% endif %}"
                                   data-rating="{{ i }}"
                                   title="Noter {{ i }} étoile{% if i > 1 %}s{% endif %}">
                                </i>
                            {% endfor %}
                        </div>
                    {% else %}
                        <div class="rating-stars">
                            {% for i in 1..5 %}
                                <i data-lucide="star" 
                                   class="star {% if product.rating is not null and i <= product.rating %}filled{% endif %}">
                                </i>
                            {% endfor %}
                        </div>
                        <small>(Connectez-vous pour noter)</small>
                    {% endif %}
                    <span class="rating-value">{{ product.rating|number_format(1) }}/5</span>
                </div>

                <div class="product-price">
                    {{ product.price|number_format(2, ',', ' ') }} 
                </div>

                <div class="product-stock {% if product.stock > 0 %}in-stock{% else %}out-of-stock{% endif %}">
                    {% if product.stock > 0 %}
                        <i data-lucide="check-circle"></i>
                        <span>En stock ({{ product.stock }} disponibles)</span>
                    {% else %}
                        <i data-lucide="x-circle"></i>
                        <span>Rupture de stock</span>
                    {% endif %}
                </div>

                {% if product.stock > 0 %}
                    <div class="product-actions">
                        <div class="quantity-selector">
                            <button type="button" class="quantity-btn" data-action="decrease">
                                <i data-lucide="minus"></i>
                            </button>
                            <input type="number" 
                                   value="{{ cartQuantity > 0 ? cartQuantity : 1 }}" 
                                   min="1" 
                                   max="{{ product.stock }}" 
                                   id="quantity"
                                   data-current-quantity="{{ cartQuantity }}">
                            <button type="button" class="quantity-btn" data-action="increase">
                                <i data-lucide="plus"></i>
                            </button>
                        </div>
                        <button class="add-to-cart-btn" data-product-id="{{ product.id }}">
                            <i data-lucide="shopping-cart"></i>
                            {% if cartQuantity > 0 %}
                                Mettre à jour le panier
                            {% else %}
                                Ajouter au panier
                            {% endif %}
                        </button>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        if (!window.cartInitialized) {
            window.cartInitialized = true;
            
            document.addEventListener('DOMContentLoaded', function() {
                lucide.createIcons();
                
                const quantityInput = document.getElementById('quantity');
                const decreaseBtn = document.querySelector('[data-action="decrease"]');
                const increaseBtn = document.querySelector('[data-action="increase"]');
                const addToCartBtn = document.querySelector('.add-to-cart-btn');
                const cartQuantityBadge = document.querySelector('.cart-quantity');
                
                const clearListeners = (element) => {
                    if (element) {
                        const newElement = element.cloneNode(true);
                        element.parentNode.replaceChild(newElement, element);
                        return newElement;
                    }
                    return null;
                };

                const newDecreaseBtn = clearListeners(decreaseBtn);
                const newIncreaseBtn = clearListeners(increaseBtn);
                const newQuantityInput = clearListeners(quantityInput);
                const newAddToCartBtn = clearListeners(addToCartBtn);
                
                if (newDecreaseBtn && newIncreaseBtn && newQuantityInput) {
                    newDecreaseBtn.addEventListener('click', function() {
                        const currentValue = parseInt(newQuantityInput.value);
                        if (currentValue > 1) {
                            newQuantityInput.value = currentValue - 1;
                        }
                    });

                    newIncreaseBtn.addEventListener('click', function() {
                        const currentValue = parseInt(newQuantityInput.value);
                        const maxStock = parseInt(newQuantityInput.getAttribute('max'));
                        if (currentValue < maxStock) {
                            newQuantityInput.value = currentValue + 1;
                        }
                    });

                    newQuantityInput.addEventListener('change', function() {
                        let value = parseInt(this.value);
                        const max = parseInt(this.getAttribute('max'));
                        if (isNaN(value) || value < 1) value = 1;
                        if (value > max) value = max;
                        this.value = value;
                    });
                }

                if (newAddToCartBtn) {
                    newAddToCartBtn.addEventListener('click', function(e) {
                        e.preventDefault();
                        
                        this.disabled = true;
                        
                        const productId = this.dataset.productId;
                        const quantity = parseInt(newQuantityInput.value) || 1;

                        fetch('/cart/add/' + productId, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({ 
                                quantity: quantity
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                newQuantityInput.dataset.currentQuantity = quantity;
                                
                                newAddToCartBtn.innerHTML = `
                                    <i data-lucide="shopping-cart"></i>
                                    Mettre à jour le panier
                                `;
                                lucide.createIcons();
                                
                                if (cartQuantityBadge) {
                                    cartQuantityBadge.textContent = data.cartQuantity;
                                    cartQuantityBadge.style.display = data.cartQuantity > 0 ? 'flex' : 'none';
                                }

                                const notification = document.createElement('div');
                                notification.className = 'notification success';
                                notification.innerHTML = `
                                    <div class="notification-content">
                                        <span>${data.message}</span>
                                    </div>
                                `;
                                document.body.appendChild(notification);
                                setTimeout(() => notification.remove(), 3000);
                            }
                        })
                        .catch(error => {
                            const notification = document.createElement('div');
                            notification.className = 'notification error';
                            notification.innerHTML = `
                                <div class="notification-content">
                                    <span>${error.message || 'Une erreur est survenue'}</span>
                                </div>
                            `;
                            document.body.appendChild(notification);
                            setTimeout(() => notification.remove(), 3000);
                        })
                        .finally(() => {
                            this.disabled = false;
                        });
                    });
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            const ratingContainer = document.querySelector('.rating-stars.interactive');
            if (!ratingContainer) return;

            const stars = ratingContainer.querySelectorAll('.star');
            const productId = ratingContainer.closest('.product-rating').dataset.productId;

            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const rating = this.dataset.rating;

                    fetch('/review/rate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({
                            productId: parseInt(productId),
                            rating: parseInt(rating)
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => Promise.reject(err));
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            stars.forEach(s => {
                                s.classList.remove('filled');
                                if (s.dataset.rating <= rating) {
                                    s.classList.add('filled');
                                }
                            });
                            const ratingValue = document.querySelector('.rating-value');
                            if (ratingValue) {
                                ratingValue.textContent = `${data.newRating}/5`;
                            }

                            const notification = document.createElement('div');
                            notification.className = 'notification success';
                            notification.innerHTML = `
                                <div class="notification-content">
                                    <span>Note mise à jour avec succès !</span>
                                </div>
                            `;
                            document.body.appendChild(notification);
                            setTimeout(() => notification.remove(), 3000);
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        const notification = document.createElement('div');
                        notification.className = 'notification error';
                        notification.innerHTML = `
                            <div class="notification-content">
                                <span>${error.error || 'Une erreur est survenue lors de la notation'}</span>
                            </div>
                        `;
                        document.body.appendChild(notification);
                        setTimeout(() => notification.remove(), 3000);
                    });
                });
            });
        });
    </script>
{% endblock %}