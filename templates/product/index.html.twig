{% extends 'base.html.twig' %}

{% block title %}Nos Produits - MakeYourPC{% endblock %}

{% block body %}
    <div class="container">
        <h1 class="my-4">Nos Produits</h1>
        
        {{ form_start(form, {'attr': {'class': 'product-filter-form'}}) }}
        <div class="search-bar mb-4">
            <div class="search-container">
                {{ form_widget(form.search) }}
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="submit">Rechercher</button>
                </div>
            </div>
        </div>

        <div class="product-container">
            <div class="filters sticky-filters">
                <h4>Filtres</h4>
                <div class="form-group number-input-container">
                    {{ form_row(form.price_min) }}
                </div>
                <div class="form-group number-input-container">
                    {{ form_row(form.price_max) }}
                </div>
                <div class="form-group">
                    {{ form_row(form.type) }}
                </div>
                <div class="form-group">
                    {{ form_row(form.rating) }}
                </div>
                <button type="submit" class="btn btn-primary mt-3">Appliquer les filtres</button>
            </div>
            
            <div class="product-grid">
                {% if products is empty %}
                    <div class="no-products-message">
                        <p>Aucun produit ne correspond à votre recherche.</p>
                        <p>Essayez de modifier vos critères de recherche ou de réinitialiser les filtres.</p>
                    </div>
                {% else %}
                    {% for product in products %}
                        <div class="product-tile">
                            <div class="product-content" onclick="window.location.href='{{ path('app_product_detail', {id: product.id}) }}'">
                                <img src="{{ asset('images/products/' ~ product.imagePath) }}" alt="{{ product.name }}">
                                <h4>{{ product.name }}</h4>
                                <div class="rating">
                                    {% set rating = product.rating %}
                                    {% for i in 1..5 %}
                                        {% if i <= rating %}
                                            <i data-lucide="star" class="star filled"></i>
                                        {% else %}
                                            <i data-lucide="star" class="star"></i>
                                        {% endif %}
                                    {% endfor %}
                                    <span class="rating-value ml-2">{{ rating|number_format(1) }}</span>
                                </div>
                                <div class="price-card">{{ product.price|number_format(2, ',', ' ') }} €</div>
                            </div>
                            <button class="btn-add-to-cart" type="button" data-product-id="{{ product.id }}">
                                <i data-lucide="shopping-cart"></i>
                            </button>
                        </div>
                    {% endfor %}
                {% endif %}
            </div>
        </div>
        {{ form_end(form) }}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const addToCartButtons = document.querySelectorAll('.btn-add-to-cart');
            
            addToCartButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    if (this.disabled) return;
                    
                    const productId = this.dataset.productId;
                    this.disabled = true;
                    
                    fetch(`/cart/add/${productId}`, {
                        method: 'POST',
                        headers: {
                            'X-CSRF-TOKEN': '{{ csrf_token('add-to-cart') }}',
                            'Content-Type': 'application/json'
                        },
                        credentials: 'same-origin'
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => {
                                throw new Error(err.message || 'Erreur serveur');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            const cartCount = document.querySelector('.cart-count');
                            if (cartCount) {
                                cartCount.textContent = data.cartCount;
                                cartCount.style.display = 'block';
                            }
                            showNotification('Produit ajouté au panier', 'success');
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        showNotification('Erreur lors de l\'ajout au panier', 'error');
                    })
                    .finally(() => {
                        this.disabled = false;
                    });
                });
            });
        });

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <div class="notification-content">
                    <i data-lucide="${type === 'success' ? 'check-circle' : 'alert-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(notification);
            lucide.createIcons();
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    </script>
{% endblock %}
