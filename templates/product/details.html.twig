{% extends 'base.html.twig' %}

{% block title %}{{ product.name }} - MakeYourPC{% endblock %}

{% block body %}
    <div class="container product-detail">
        <div class="product-main">
            <div class="product-image-container">
                <img src="{{ asset('images/products/' ~ product.imagePath) }}" alt="{{ product.name }}" class="product-image">
            </div>
            
            <div class="product-info">
                <div class="product-header">
                    <span class="product-category">{{ product.type }}</span>
                    <h1>{{ product.name }}</h1>
                </div>

                <div class="product-rating" data-product-id="{{ product.id }}">
                    {% if app.user %}
                        <div class="rating-stars interactive">
                            {% for i in 1..5 %}
                                <i data-lucide="star" 
                                   class="star {% if product.rating is not null and i <= product.rating %}filled{% endif %}"
                                   data-rating="{{ i }}"
                                   title="Noter {{ i }} étoile{% if i > 1 %}s{% endif %}">
                                </i>
                            {% endfor %}
                        </div>
                    {% else %}
                        <div class="rating-stars">
                            {% for i in 1..5 %}
                                <i data-lucide="star" 
                                   class="star {% if product.rating is not null and i <= product.rating %}filled{% endif %}">
                                </i>
                            {% endfor %}
                        </div>
                        <small>(Connectez-vous pour noter)</small>
                    {% endif %}
                    <span class="rating-value">{{ product.rating|number_format(1) }}/5</span>
                </div>

                <div class="product-price">
                    {{ product.price|number_format(2, ',', ' ') }} 
                </div>

                <div class="product-stock {% if product.stock > 0 %}in-stock{% else %}out-of-stock{% endif %}">
                    {% if product.stock > 0 %}
                        <i data-lucide="check-circle"></i>
                        <span>En stock ({{ product.stock }} disponibles)</span>
                    {% else %}
                        <i data-lucide="x-circle"></i>
                        <span>Rupture de stock</span>
                    {% endif %}
                </div>

                {% if product.stock > 0 %}
                    <div class="product-actions">
                        <div class="quantity-selector">
                            <button type="button" class="quantity-btn" data-action="decrease">
                                <i data-lucide="minus"></i>
                            </button>
                            <input type="number" value="1" min="1" max="{{ product.stock }}" id="quantity">
                            <button type="button" class="quantity-btn" data-action="increase">
                                <i data-lucide="plus"></i>
                            </button>
                        </div>
                        <button class="add-to-cart-btn" data-product-id="{{ product.id }}">
                            <i data-lucide="shopping-cart"></i>
                            Ajouter au panier
                        </button>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            lucide.createIcons();
            
            const quantityInput = document.getElementById('quantity');
            const maxStock = {{ product.stock }};
            
            function updateQuantity(action) {
                let currentValue = parseInt(quantityInput.value) || 1;
                
                if (action === 'decrease' && currentValue > 1) {
                    quantityInput.value = currentValue - 1;
                } else if (action === 'increase' && currentValue < maxStock) {
                    quantityInput.value = currentValue + 1;
                }
            }

            document.querySelectorAll('.quantity-btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    updateQuantity(this.dataset.action);
                });
            });

            quantityInput.addEventListener('change', function() {
                let value = parseInt(this.value);
                if (isNaN(value) || value < 1) {
                    this.value = 1;
                } else if (value > maxStock) {
                    this.value = maxStock;
                }
            });

            // Système de notation
            const ratingContainer = document.querySelector('.rating-stars.interactive');
            if (!ratingContainer) return;

            const stars = ratingContainer.querySelectorAll('.star');
            const productId = document.querySelector('.product-rating').dataset.productId;

            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const rating = this.dataset.rating;
                    
                    fetch('/review/rate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({
                            productId: parseInt(productId),
                            rating: parseInt(rating)
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Erreur réseau');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Mise à jour visuelle
                            stars.forEach(s => {
                                s.classList.remove('filled');
                                if (s.dataset.rating <= rating) {
                                    s.classList.add('filled');
                                }
                            });
                            const ratingValue = document.querySelector('.rating-value');
                            if (ratingValue) {
                                ratingValue.textContent = `${data.newRating}/5`;
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        alert('Une erreur est survenue lors de la notation');
                    });
                });
            });
        });
    </script>
{% endblock %}